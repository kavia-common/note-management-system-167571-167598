{"is_source_file": true, "format": "Java", "description": "This Java source file defines a Spring component named AuthFilter that extends OncePerRequestFilter. It filters incoming HTTP requests to extract a bearer token from the Authorization header, validates it via a service, and attaches a user ID attribute to the request. It also bypasses filtering for specific open endpoints.", "external_files": ["org.springframework.web.filter.OncePerRequestFilter", "jakarta.servlet.FilterChain", "jakarta.servlet.ServletException", "jakarta.servlet.http.HttpServletRequest", "jakarta.servlet.http.HttpServletResponse", "org.springframework.http.HttpHeaders", "java.io.IOException", "java.util.UUID"], "external_methods": ["tokenService.validate"], "published": ["AuthFilter"], "classes": [{"name": "AuthFilter", "description": "A Spring filter that authenticates requests based on a Bearer token, extracts user ID, and adds it as a request attribute."}], "methods": [{"name": "AuthFilter", "description": "Constructor that injects the token validation service."}, {"name": "shouldNotFilter", "description": "Determines whether to skip this filter for certain endpoints like auth, Swagger, health, and others."}, {"name": "doFilterInternal", "description": "Extracts the Bearer token from the request header, validates it, and attaches the user ID to the request if valid; then continues filter chain."}], "calls": ["tokenService.validate", "filterChain.doFilter"], "search-terms": ["AuthFilter", "Bearer token", "SimpleTokenService", "header Authorization", "user ID extraction", "request attribute Auth user ID", "filter bypass endpoints"], "state": 2, "file_id": 16, "knowledge_revision": 34, "git_revision": "", "hash": "577d1dbbf17bcea1ac398f2e0450bf52", "format-version": 4, "code-base-name": "notes_app_backend", "filename": "notes_app_backend/src/main/java/com/example/notesappbackend/security/AuthFilter.java", "revision_history": [{"34": ""}]}